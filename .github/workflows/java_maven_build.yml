name: Java CI/CD with Maven
on:
  push:
    branches:
      - "master"
    tags-ignore:
      - v*

jobs:
  build-test-java:
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

    - name: Build with Maven
      working-directory: ./java_app
      run: mvn -B -DskipTests clean package --file pom.xml

    - name: Test with maven
      working-directory: ./java_app
      run: mvn test

  build-push-docker:
    runs-on: ubuntu-22.04
    needs: build-test-java
    permissions: 
      contents: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Push new version
        id: version_push
        working-directory: ./java_app
        run: |
          NEW_VERSION=$(python app_version_inc.py)
          git config --global user.email java_pipeline_runner@github.com
          git config --global user.name java_pipeline_runner
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/$GITHUB_REPOSITORY
          git checkout "${GITHUB_REF:11}"
          git add .
          git commit -m "new version - $NEW_VERSION"
          git tag -a v$NEW_VERSION -m "Release version $NEW_VERSION"
          git push --tags
          echo "NEW_VERSION=$NEW_VERSION" >> "$GITHUB_OUTPUT"

      # - name: Install AWS CLI
      #   run: |
      #     sudo apt-get update
      #     sudo apt-get install -y awscli

      - name: Configure AWS-cli
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # - name: Set up Docker Buildx
      #   uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./java_app/
          file: ./java_app/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/java-app:${{steps.version_push.outputs.NEW_VERSION}}
            ${{ secrets.DOCKER_USERNAME }}/java-app:latest

  terraform-provision:
    runs-on: ubuntu-22.04
    needs: build-push-docker

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: "0.14.11"

    # - name: Install AWS CLI
    #   run: |
    #     sudo apt-get update
    #     sudo apt-get install -y awscli

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Deploy Terraform Backend
      working-directory: ./terraform_backend
      run: |
        aws s3 rm s3://java-app-tf-backend --recursive || true
        aws s3 rb s3://java-app-tf-backend || true
        aws dynamodb delete-table --table-name "java-app-tf-lock" || true
        terraform init
        terraform apply -auto-approve -var="aws_region=${{ secrets.AWS_REGION }}" 
        
    # - name: Init App TF Module
    #   working-directory: ./IaC_app
    #   run: terraform init

    - name: Deploy Terraform app module
      working-directory: ./IaC_app
      run: |
        terraform init
        VERSION=$(cat ../java_app/java_app_version.txt | awk '{print $4}')
        python ec2_connect_ip_script.py ${{ secrets.AWS_REGION }}
        terraform state list | grep -q 'aws_instance.java-app' && terraform taint aws_instance.java-app
        terraform apply -auto-approve \
          -var="dockerhub_username=${{ secrets.DOCKER_USERNAME }}" \
          -var="dockerhub_password=${{ secrets.DOCKER_PASSWORD }}" \
          -var="aws_region=${{ secrets.AWS_REGION }}" \
          -var="app_version=$VERSION"