name: Java CI/CD with Maven
on:
  push:
    branches: [ "master" ]

jobs:
  build-test-java:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

    - name: Build with Maven
      working-directory: ./java_app
      run: mvn -B -DskipTests clean package --file pom.xml

    - name: Test with maven
      working-directory: ./java_app
      run: mvn test

  build-push-docker:
    runs-on: ubuntu-latest
    needs: build-test-java

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install AWS CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y awscli

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "us-east-1"

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # - name: Download version file from S3
      #   run: aws s3 cp s3://javaapp-terraform-backend/global/java_app_version.txt .

      # - name: Run version script
      #   id: version_script
      #   run: |
      #     output=$(python app_version_inc.py)
      #     echo "::set-output name=version::$output"

      # - name: Update version file in S3
      #   run: aws s3 cp java_app_version.txt s3://javaapp-terraform-backend/global/java_app_version.txt

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./java_app/
          file: ./java_app/Dockerfile
          push: true
          build-args: VERSION_ARG=1.0.0
          tags: ${{ secrets.DOCKER_USERNAME }}/java-app:latest
          # ${{ secrets.DOCKER_USERNAME }}/java-app:${{steps.version_script.outputs.version}}

  terraform-provision:
    runs-on: ubuntu-latest
    needs: build-push-docker

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: "0.14.11"

    - name: Install AWS CLI
      run: |
        sudo apt-get update
        sudo apt-get install -y awscli

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: "us-east-1"

    # - name: Get version from S3
    #   id: app_version
    #   run: |
    #      aws s3 cp s3://javaapp-terraform-backend/global/java_app_version.txt .
    #      version=$(cat java_app_version.txt | awk '{print $4}')
    #      echo "::set-output name=version::$version"

    - name: Deploy Terraform Backend
      working-directory: ./terraform_backend
      run: |
        if aws s3api list-buckets --query 'Buckets[*].Name' | grep -q 'java-app-tf-backend';
        then
          echo "Backend bucket found."
        else
          echo "Backend bucket not found."
          terraform init
          terraform apply -auto-approve -var="aws_region=${{ secrets.AWS_REGION }}" 
        fi

    - name: Init App TF Module
      working-directory: ./IaC_app
      run: terraform init

    - name: Apply Terraform app
      working-directory: ./IaC_app
      run: |
        ec2_connect_ip=$(python ec2_connect_ip_script.py ${{ secrets.AWS_REGION }})
        echo $ec2_connect_ip
        terraform state list | grep -q 'aws_instance.java-app' && terraform taint aws_instance.java-app
        terraform apply -auto-approve \
          -var="dockerhub_username=${{ secrets.DOCKER_USERNAME }}" \
          -var="dockerhub_password=${{ secrets.DOCKER_PASSWORD }}" \
          -var="aws_region=${{ secrets.AWS_REGION }}"
          -var="ec2_connect_ip=$ec2_connect_ip"

